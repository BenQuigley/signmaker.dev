<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben Quigley</title><link href="https://signmaker.dev/" rel="alternate"></link><link href="https://signmaker.dev/feeds/all.atom.xml" rel="self"></link><id>https://signmaker.dev/</id><updated>2023-12-31T00:00:00-05:00</updated><subtitle>Ben Quigley | Software Developer</subtitle><entry><title>Refinements from magit</title><link href="https://signmaker.dev/refinements-from-magit.html" rel="alternate"></link><published>2023-12-31T00:00:00-05:00</published><updated>2023-12-31T00:00:00-05:00</updated><author><name>Ben Quigley</name></author><id>tag:signmaker.dev,2023-12-31:/refinements-from-magit.html</id><summary type="html">&lt;p&gt;Unlike most emacs users, I haven&amp;#8217;t wholeheartedly adopted magit as my sole
interface for git. I mostly stick to the command line, in the coziness of my
aliases&amp;nbsp;- &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git branch&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;cha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git checkout&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rai&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git fetch; git rebase --interactive origin/develop&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rebase …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Unlike most emacs users, I haven&amp;#8217;t wholeheartedly adopted magit as my sole
interface for git. I mostly stick to the command line, in the coziness of my
aliases&amp;nbsp;- &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git branch&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;cha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git checkout&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rai&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git fetch; git rebase --interactive origin/develop&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rebase --abort&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rebase --continue&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git status --short&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git status --long&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;- and a few helper functions. However, I do open magit often, partly because
emacs is always already open, but also because magit&amp;#8217;s configurations are deeply&amp;nbsp;clever.&lt;/p&gt;
&lt;p&gt;For this blog post, I wanted to delve into how magit&amp;#8217;s default behaviors are so
well-thought-out that it can be instructive to explore them. If I no longer had
access to magit, I would still keep these four habits in my&amp;nbsp;workflow:&lt;/p&gt;
&lt;h2&gt;&amp;#8212;force-with-lease is better than&amp;nbsp;&amp;#8212;force&lt;/h2&gt;
&lt;p&gt;I learned at my first engineering job - at EditShare, a shop where git fluency
was somewhat more important than at your standard web dev shop because we
maintained several live branches of our code - the helpfulness of typing
&lt;code&gt;--force-with-lease&lt;/code&gt; instead of &lt;code&gt;--force&lt;/code&gt;, using &lt;code&gt;--force&lt;/code&gt; / &lt;code&gt;-f&lt;/code&gt; only when all
else failed. It&amp;#8217;s helpful because, if some collaborator has pushed a fix commit
to your branch while you commited something else and are about to force push,
your force push will obliterate the collaboration unless git warns you there
are upstream changes that you don&amp;#8217;t have. Git gives that warning only if you use
&lt;code&gt;--force-with-lease&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{repository}&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Updates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;were&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rejected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;locally&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;usually&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pushing&lt;/span&gt;
&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integrate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;
&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git pull ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pushing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;-f&lt;/code&gt; is 16 characters shorter than  &lt;code&gt;--force-with-lease&lt;/code&gt;, so it&amp;#8217;s
easy to default to on the command line. With magit-push, though, it&amp;#8217;s more the
default - &lt;code&gt;-f&lt;/code&gt; is the key activating force-with-lease and &lt;code&gt;-F&lt;/code&gt; activates force
mode, so users who take hints from magit about how they should use git are fs
trained to prefer the safer and better&amp;nbsp;option.&lt;/p&gt;
&lt;h2&gt;Name your branch&amp;#8217;s&amp;nbsp;upstream&lt;/h2&gt;
&lt;p&gt;In a case of a magit feature not only surpassing the git &lt;span class="caps"&gt;CLI&lt;/span&gt;, but actually making
it easier to use, magit makes it very convenient to set a branch&amp;#8217;s upstream,
giving you an option to set it when pushing or pulling from a&amp;nbsp;branch.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s great for a branch&amp;#8217;s upstream to be set because then you can use &lt;code&gt;git pull&lt;/code&gt;
(or &lt;code&gt;magit-pull&lt;/code&gt;) on that branch more easily. With bare git, only under certain
specific circumstances will the upstream be set automatically. git has no way to
know that your local branch named &lt;code&gt;hotfix&lt;/code&gt; is actually related to the &lt;code&gt;hotfix&lt;/code&gt;
on GitHub of the same&amp;nbsp;name.&lt;/p&gt;
&lt;h2&gt;Name your&amp;nbsp;stashes&lt;/h2&gt;
&lt;p&gt;When doing a &lt;code&gt;git stash&lt;/code&gt; from magit, there are a lot of options to choose from,
most of which I don&amp;#8217;t use. The next step, is the option to give your stash a
name, like &amp;#8220;&lt;span class="caps"&gt;WIP&lt;/span&gt; notes &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8221; or&amp;nbsp;&amp;#8220;tentative-test-refactor&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Before I used magit, I didn&amp;#8217;t know it was an option to add a message to a stash,
but reviewing the output of &lt;code&gt;git stash --help&lt;/code&gt;, it&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;COMMANDS&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="nv"&gt;patch&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="nv"&gt;staged&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;[&lt;span class="nv"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;]&lt;span class="nv"&gt;keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;untracked&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="nv"&gt;quiet&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|--&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;pathspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;pathspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nul&lt;/span&gt;]]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;--&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;pathspec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;...]
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nv"&gt;Save&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;modifications&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;stash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;roll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;them&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HEAD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;working&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tree&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;part&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;along&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;stashed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thanks to the magit developers for the&amp;nbsp;lesson.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s extremely convenient to be able to stash something without worrying about losing
it in a pile of stashed&amp;nbsp;things.&lt;/p&gt;
&lt;h2&gt;Reverting hunks is&amp;nbsp;easy&lt;/h2&gt;
&lt;p&gt;Reverting an entire commit is usually easy (find the commit&amp;#8217;s hash in &lt;code&gt;git log&lt;/code&gt;
and then run &lt;code&gt;git revert {commit-hash}&lt;/code&gt;), but reverting a single fragment of a
commit? Hard to do from the command line - the easiest way I can think of is to
interactive rebase back to the commit in question (with &lt;code&gt;edit&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt;), and
then rewrite the code and add a new commit, or amend&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;None of that is automatic, and it would be quite laborious compared to reverting
the hunk in magit. When the user is reviewing &lt;code&gt;magit-revision&lt;/code&gt;, magit gives a
&lt;code&gt;reverse&lt;/code&gt; option with the keystroke &lt;code&gt;v&lt;/code&gt;. That&amp;#8217;s&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;One shouldn&amp;#8217;t have to rewrite history to use one&amp;#8217;s version control system to
undo a fragment of a change&amp;nbsp;record.&lt;/p&gt;</content><category term="blog"></category><category term="emacs"></category><category term="computing"></category><category term="blog"></category></entry><entry><title>Personal Scripts</title><link href="https://signmaker.dev/personal-scripts.html" rel="alternate"></link><published>2023-10-20T00:00:00-05:00</published><updated>2023-10-20T00:00:00-05:00</updated><author><name>Ben Quigley</name></author><id>tag:signmaker.dev,2023-10-20:/personal-scripts.html</id><summary type="html">&lt;p&gt;Whether you&amp;#8217;re a professional software developer or an &amp;#8220;I know enough to be
dangerous&amp;#8221; power user on a higher education team, writing micro-programs to
automate little tasks is one of the real joys of&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;Yet, if you&amp;#8217;re learning programming, you&amp;#8217;ve probably read tutorials about how to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Whether you&amp;#8217;re a professional software developer or an &amp;#8220;I know enough to be
dangerous&amp;#8221; power user on a higher education team, writing micro-programs to
automate little tasks is one of the real joys of&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;Yet, if you&amp;#8217;re learning programming, you&amp;#8217;ve probably read tutorials about how to
create a Django webserver, a git repository, a personal portfolio page, but may
still have never seen a concrete illustration of how to write your own scripts
and invoke them from your&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;For example, here&amp;#8217;s a fun one from my scripts folder. I open my command line and&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;word
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the output&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;retiringness
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My &lt;code&gt;word&lt;/code&gt; command is a Python script that chooses and prints a random word from
the computer&amp;#8217;s built-in word list - either &lt;code&gt;/usr/share/dict/words&lt;/code&gt; on &lt;span class="caps"&gt;OS&lt;/span&gt; X, or
&lt;code&gt;cracklib-small&lt;/code&gt; on Linux. I&amp;#8217;ll post this script here so that you can make use
of it yourself if you want to, but the main goal of this blog entry is to
encourage and unblock you to create your own quick scripts to accomplish
absolutely anything you want to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll give examples in the
&lt;a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;bash&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt; languages
for this blog post, which are both great languages to know - bash being the
Buck knife and Python the Leatherman multitool of your digital toolbelt - but
there are many other great languages to do scripting in too.&amp;nbsp;Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you know some other language better and you like it, then you might as well
  use&amp;nbsp;that;&lt;/li&gt;
&lt;li&gt;if you&amp;#8217;ve been following the &lt;a href="https://en.wikipedia.org/wiki/DevOps"&gt;DevOps&lt;/a&gt;
  track of your career then you might share (or want to share) that discipline&amp;#8217;s
  mild bias in favor of the
  &lt;a href="https://en.wikipedia.org/wiki/Go_%28programming_language%29"&gt;Go&lt;/a&gt;&amp;nbsp;language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;re feeling a little indecisive about this, just ignore the feeling and
keep reading! No one&amp;#8217;s ever sorry that they&amp;#8217;ve learned a little bash or&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;A few more quick&amp;nbsp;caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you&amp;#8217;re absolutely completely unfamiliar with the shell that&amp;#8217;s fine; keep
  reading, but although I&amp;#8217;ve done my best to cover the basics there is a lot to
  absorb. &lt;a href="https://linuxjourney.com/"&gt;LinuxJourney.com&lt;/a&gt; is a wonderful bookmark
  for uncovering the basics of command-line&amp;nbsp;interfaces.&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re on Windows, all the general points here are still true, but you will
  need to either set up Windows Subsystem for Linux in order to do the Unix-type
  tasks that I&amp;#8217;m going to talk about here. Alternatively, I&amp;#8217;m sure all this
  stuff has some equivalent in
  &lt;a href="https://github.com/PowerShell/PowerShell"&gt;Powershell&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re not on Windows, you already have bash installed, but you may need to
  &lt;a href="https://realpython.com/installing-python/"&gt;install Python&lt;/a&gt; before Python
  scripts could be&amp;nbsp;run.&lt;/li&gt;
&lt;li&gt;If you are using &lt;a href="https://en.wikipedia.org/wiki/Z_shell"&gt;zsh&lt;/a&gt; as your shell,
  which is the default in some &lt;span class="caps"&gt;OS&lt;/span&gt; X machines, it&amp;#8217;s &lt;code&gt;~/.zsh_aliases&lt;/code&gt; instead of
  &lt;code&gt;~/.bash_aliases&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Just lob the quick stuff into&amp;nbsp;~/.bash_aliases&lt;/h3&gt;
&lt;p&gt;My &lt;code&gt;word&lt;/code&gt; script above is a 51-line Python script, but if I were writing it in a
big hurry, it could just live in my &lt;code&gt;~/.bash_aliases&lt;/code&gt; file as a couple of lines
of bash. It would have to work a little differently on Mac vs. Linux because
their system word list files have different names. Here&amp;#8217;s an example
&lt;code&gt;~/.bash_aliases&lt;/code&gt; section for for things that should be defined differently
based on the operating&amp;nbsp;system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$OSTYPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;linux-gnu&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xclip -sel c&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$OSTYPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;darwin&amp;quot;&lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pbcopy&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OS type &lt;/span&gt;&lt;span class="nv"&gt;$OSTYPE&lt;/span&gt;&lt;span class="s2"&gt; not recognized; some aliases not set.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Also, if you steal this for your aliases file, then you have a convenient
&lt;code&gt;copy&lt;/code&gt; command that allows you to copy stuff from the command line to your
normal copy / paste clipboard. Linux users need to install &lt;code&gt;xclip&lt;/code&gt; before it
will work; I think your normal package manager should have it (&lt;code&gt;sudo apt install
xclip&lt;/code&gt; on Ubuntu / Debian / Mint / Pop!_OS). Example usage: &lt;code&gt;cat
~/my-cool-file.txt | copy&lt;/code&gt; copies the contents of your cool file to your&amp;nbsp;clipboard.)&lt;/p&gt;
&lt;p&gt;We can implement &lt;code&gt;word&lt;/code&gt; easily here by adding the line
&lt;code&gt;dictionary_filename=cracklib-small&lt;/code&gt; to the Linux section and
&lt;code&gt;dictionary_filename=words&lt;/code&gt; to the Darwin (&lt;span class="caps"&gt;OS&lt;/span&gt; X) one, then outside of this logic
block, we can&amp;nbsp;add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat /usr/share/dict/&lt;/span&gt;&lt;span class="nv"&gt;$dictionary_filename&lt;/span&gt;&lt;span class="s2"&gt; | shuf -n 1&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s mind-boggling how much can be accomplished with just&amp;nbsp;bash.&lt;/p&gt;
&lt;p&gt;Here are a few more that I use&amp;nbsp;frequently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git status --short&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Underrated argument to see a super-casual git status!&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git branch&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;cha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git checkout&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rai&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git fetch; git rebase --interactive origin/develop&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ram&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git fetch; git rebase --interactive origin/master&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rebase --abort&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git rebase --continue&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(I would type &lt;code&gt;git rebase -i&lt;/code&gt; on the command line, but for inscribing into a
scripts file like &lt;code&gt;~/.bash_aliases&lt;/code&gt;, it&amp;#8217;s nice to type out the full name of the
argument, for example &lt;code&gt;--interactive&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;I also have a few simple functions defined in my &lt;code&gt;~/.bash_aliases&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;names&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--name-only&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\S&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Ev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^(commit|Author|Date)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;uniq
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;names
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of this function is the sorted, deduplicated filenames of all the
files that have been changed in the recent 3 git commits (when called with
&lt;code&gt;names 3&lt;/code&gt;). I couldn&amp;#8217;t exactly say why this is useful, but I use it a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;(The &lt;code&gt;export -f&lt;/code&gt; line is necessary, or this function would only be available
inside the script, in this case the &lt;code&gt;~/.bash_aliases&lt;/code&gt; file, itself. We want it
to be available elsewhere in the shell, so we must export it. For whatever
reason, the actual aliases do not work like&amp;nbsp;that.)&lt;/p&gt;
&lt;p&gt;And finally, my file contains a code comment with a little note to&amp;nbsp;myself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Reminders&lt;/span&gt;
&lt;span class="c1"&gt;# =========&lt;/span&gt;
&lt;span class="c1"&gt;# Commands that we don&amp;#39;t necessarily need aliases for, except that we keep forgetting:&lt;/span&gt;
&lt;span class="c1"&gt;# docker system prune --volumes&lt;/span&gt;
&lt;span class="c1"&gt;# The docker system prune command is a shortcut that prunes images, containers,&lt;/span&gt;
&lt;span class="c1"&gt;# and networks. Volumes are not pruned by default, and you must specify the&lt;/span&gt;
&lt;span class="c1"&gt;# --volumes flag for docker system prune to prune volumes. By default, you are&lt;/span&gt;
&lt;span class="c1"&gt;# prompted to continue. To bypass the prompt, use the -f or --force flag.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(I don&amp;#8217;t know why I write &amp;#8220;we&amp;#8221; in my system configurations. Nobody&amp;#8217;s looking at
this stuff except for me. As my friend Darrick said, &amp;#8220;What do you mean, &amp;#8216;we&amp;#8217;?
Got a mouse in your&amp;nbsp;pocket?&amp;#8221;)&lt;/p&gt;
&lt;h4&gt;Make aliases for whatever you do a&amp;nbsp;lot&lt;/h4&gt;
&lt;p&gt;If you enter commands into your command line, they&amp;#8217;re saved in a file normally
located in &lt;code&gt;~/.bash_history&lt;/code&gt;(&lt;code&gt;~/.zsh_history&lt;/code&gt; for zsh users). There are a lot of
uses that the bash shell makes from this, such as auto-completing previously
entered commands (usually with Ctrl+r), but one great use you can make of it is
to make it spit out what are your top 20 most frequently used commands. I
constructed this quickly with some googling, but it works fine on my&amp;nbsp;machines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat ~/.bash_history | sort | uniq -c | sort -k2nr | tail -n 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of mine are already bash aliases. Here are the top&amp;nbsp;8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; 897 rai
 926 git commit
1333 git stash
1404 bra
1435 git commit --amend
3004 django
4037 git add -p
5586 tig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The most notable exception to that is the wonderful command-line git client,
&lt;a href="https://jonas.github.io/tig/"&gt;tig&lt;/a&gt;, which I don&amp;#8217;t need an alias for because its
name is already so short, and which I more or less live inside of. (Here&amp;#8217;s to
the next 5,000&amp;nbsp;invocations!)&lt;/p&gt;
&lt;p&gt;So if you have used your command line before, and you run this command, you can
see what you do the most often. If anything in its output is very verbose, it
might be a good candidate for adding an alias for, and saving a few&amp;nbsp;keystrokes.&lt;/p&gt;
&lt;h3&gt;Full&amp;nbsp;Scripts&lt;/h3&gt;
&lt;p&gt;Writing in bash can get tiresome; I do a lot of my quick scripting in Python.
Here&amp;#8217;s the quick-and-dirty to getting your scripts folder&amp;nbsp;together.&lt;/p&gt;
&lt;h4&gt;How can I sync my scripts across all my&amp;nbsp;computers?&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s assume that (like me) you are writing general-purpose scripts that you&amp;#8217;d
like to be able to use anywhere. I stored my scripts in &lt;code&gt;~/Dropbox/scripts&lt;/code&gt;
until I migrated from Dropbox to &lt;a href="https://mega.nz/"&gt;Mega&lt;/a&gt; because they give you
more storage for free, encrypt your drive for you, and don&amp;#8217;t look at your stuff;
but you can put yours wherever you&amp;nbsp;want.&lt;/p&gt;
&lt;h4&gt;How can I make my scripts reachable from my&amp;nbsp;shell?&lt;/h4&gt;
&lt;p&gt;I don&amp;#8217;t want to have to type &lt;code&gt;python3 ~/scripts/{script-name}&lt;/code&gt;; I want to type
&lt;code&gt;{script-name}&lt;/code&gt; only and have it work, regardless of what working directory my
shell is in. To do this, update your &lt;code&gt;~/.bashrc&lt;/code&gt; to update your &lt;span class="caps"&gt;PATH&lt;/span&gt; variable to
contain your scripts&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/mega/scripts&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# replace $HOME/mega/scripts with the path of your scripts folder.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then restart your shell, or &lt;code&gt;source ~/.bashrc&lt;/code&gt;, in order for the change to take&amp;nbsp;effect.&lt;/p&gt;
&lt;h4&gt;How do I make the script be callable as &lt;code&gt;name&lt;/code&gt; instead of &lt;code&gt;name.py&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;To accomplish this, literally just name the script &lt;code&gt;name&lt;/code&gt; instead of &lt;code&gt;name.py&lt;/code&gt;.
However, more quick changes are&amp;nbsp;needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the script executable with &lt;code&gt;chmod +x ~/scripts/name&lt;/code&gt; (or &lt;code&gt;chmod +x
   ~/scripts/*&lt;/code&gt; to make everything in your scripts folder&amp;nbsp;executable).&lt;/li&gt;
&lt;li&gt;Make the first line of your script &lt;code&gt;#!/usr/bin/env python&lt;/code&gt;. This is so that
   your system will know that the executable file &lt;code&gt;name&lt;/code&gt;, which otherwise just
   contains text, should be executed with the &lt;code&gt;python3&lt;/code&gt; program, since you&amp;#8217;re no
   longer calling it with &lt;code&gt;python3 name.py&lt;/code&gt; as you might be used&amp;nbsp;to.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;time&lt;/code&gt; command, we can compare the runtime of the quickly implemented shell
version of my &lt;code&gt;word&lt;/code&gt; script to the pre-existing, Python&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/usr/share/dict/words&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;shuf&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
Alopecias

real&lt;span class="w"&gt;    &lt;/span&gt;0m0.030s
user&lt;span class="w"&gt;    &lt;/span&gt;0m0.018s
sys&lt;span class="w"&gt;     &lt;/span&gt;0m0.021s
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;~/mega/scripts/word
pseudopupal

real&lt;span class="w"&gt;    &lt;/span&gt;0m0.107s
user&lt;span class="w"&gt;    &lt;/span&gt;0m0.047s
sys&lt;span class="w"&gt;     &lt;/span&gt;0m0.031s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So there was a real speed improvement to using bare-naked bash as opposed to
Python. But this is not an apples-to-apples comparison - glancing at my existing
&lt;code&gt;word&lt;/code&gt; script, I remember that it has some niceties that the quick shell version
doesn&amp;#8217;t have - an &lt;code&gt;argparse.ArgumentParser&lt;/code&gt; gets us a quick &lt;code&gt;-h/--help&lt;/code&gt; command,
a few alternative modes, and there&amp;#8217;s a little joke in there (cribbed from
&lt;a href="https://xkcd.com/221/"&gt;xkcd&lt;/a&gt; as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;I share this script, not because I think you need a script that generates random
words. I just want to plant seeds, especially for readers that might not be
familiar with programming, for concepts that many people add to their personal
scripts that are&amp;nbsp;helpful:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding a &lt;code&gt;-h/--help&lt;/code&gt; argument that, when received, prints a help message
   describing all the other options, and then (importantly) closes the program
   without doing its regular function. (As I mentioned above, Python&amp;#8217;s
   &lt;code&gt;argparse&lt;/code&gt; module gets you this for&amp;nbsp;free.)&lt;/li&gt;
&lt;li&gt;Raising errors (which exits the program, in Python) on purpose when the
   script finds itself in a situation that you didn&amp;#8217;t expect (like, in my case,
   running on a Windows machine where there is no &lt;code&gt;/usr/share/dict/&lt;/code&gt; directory).&lt;/li&gt;
&lt;li&gt;Writing your code as simply as possible, and adding comments (the &lt;code&gt;#&lt;/code&gt; lines)
   where appropriate and explanatory docstrings (the &lt;code&gt;"""..."""&lt;/code&gt; lines) to each
   function so that you can remember later what they were supposed to&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;Avoid using third-party packages, anything you have to &lt;code&gt;pip install&lt;/code&gt; from the
   command line. A lot of Python learners are interested in learning Python&amp;#8217;s
   major analysis tools, such as &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt;, but (A) your software
   development skills will be much stronger if you learn to use the standard
   library to accomplish simple tasks, and (B) your script will be more useful
   to you if it doesn&amp;#8217;t always fail the first time you use it until you remember
   you needed to &lt;code&gt;pip install pandas&lt;/code&gt; on your new &lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;#8217;s the&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print a random word from a word list.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;

&lt;span class="c1"&gt;# The word list that ships with the system:&lt;/span&gt;
&lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;WORD_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/share/dict&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;WORD_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;WORD_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/cracklib-small&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Darwin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;WORD_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;WORD_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/words&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unsupported operating system &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;PARSER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;PARSER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--brainstorm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PARSER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ARGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PARSER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Read the word list.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WORD_LIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pylint: disable=broad-except&lt;/span&gt;
        &lt;span class="c1"&gt;# Chosen by fair dice roll, guaranteed to be random&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;saplings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Process the user&amp;#39;s args and generate words.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;brainstorm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thank you for reading! Reach out if you have questions and I&amp;#8217;ll incorporate your
thoughts into this&amp;nbsp;post.&lt;/p&gt;</content><category term="blog"></category><category term="computing"></category><category term="blog"></category></entry><entry><title>All My Disinterests</title><link href="https://signmaker.dev/all-my-disinterests.html" rel="alternate"></link><published>2023-07-26T00:00:00-05:00</published><updated>2023-07-26T00:00:00-05:00</updated><author><name>Ben Quigley</name></author><id>tag:signmaker.dev,2023-07-26:/all-my-disinterests.html</id><summary type="html">&lt;p&gt;My Android phone has a news feed app, which is helpfully named just &amp;#8220;Google&amp;#8221;. It
serves news articles from various sources based on your Interests, which it
tracks for you, but importantly, you can&amp;#8217;t customize your interests. You can
&lt;em&gt;confirm&lt;/em&gt; an interest that it suggests for you, which I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My Android phone has a news feed app, which is helpfully named just &amp;#8220;Google&amp;#8221;. It
serves news articles from various sources based on your Interests, which it
tracks for you, but importantly, you can&amp;#8217;t customize your interests. You can
&lt;em&gt;confirm&lt;/em&gt; an interest that it suggests for you, which I apparently have done
three times. So, presenting for the first time, this complete list of my
interests and disinterests, courtesy of &amp;#8220;Google&amp;#8221; (you know, the news feed app
for&amp;nbsp;Android):&lt;/p&gt;
&lt;h2&gt;Interests&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Art&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Mindfulness&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am a little surprised to see baking, programming, guitar playing, guitar
pedals, and climate change missing from this list, but I guess that an Interest
gets populated here only when &amp;#8220;Google&amp;#8221; (you know, the news feed app for Android)
shows me a story and I tap the ❤️ button to indicate my pleasure with that story
or its topic, &lt;em&gt;and&lt;/em&gt; I never tap the &amp;#8220;☹️ Not interested in this topic&amp;#8221; button on
the same topic&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;That last bit might be acting as the Great Filter here, because I click the &amp;#8220;☹️
Not interested in this topic&amp;#8221; button a lot. While the &amp;#8220;Interests&amp;#8221; section of my
preferences (which I am not allowed to add to) is sparsely populated, the &amp;#8220;Not
Interested&amp;#8221; section has grown&amp;nbsp;wild:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;Disinterests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2000&amp;nbsp;Mules&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ALDI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Almond&amp;nbsp;meal&lt;/li&gt;
&lt;li&gt;Amazon&amp;nbsp;Fire&lt;/li&gt;
&lt;li&gt;Amazon&amp;nbsp;Kindle&lt;/li&gt;
&lt;li&gt;Amazon Kindle&amp;nbsp;Oasis&lt;/li&gt;
&lt;li&gt;Amazon Prime&amp;nbsp;Video&lt;/li&gt;
&lt;li&gt;Amazon.com&lt;/li&gt;
&lt;li&gt;Angelina&amp;nbsp;Jolie&lt;/li&gt;
&lt;li&gt;AnnualCreditReport.com&lt;/li&gt;
&lt;li&gt;5:39&lt;/li&gt;
&lt;li&gt;93%&lt;/li&gt;
&lt;li&gt;Apple&amp;nbsp;Watch&lt;/li&gt;
&lt;li&gt;Artificial&amp;nbsp;intelligence&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T&lt;/li&gt;
&lt;li&gt;Autumn leaf&amp;nbsp;color&lt;/li&gt;
&lt;li&gt;Avengers:&amp;nbsp;Endgame&lt;/li&gt;
&lt;li&gt;Baked&amp;nbsp;potato&lt;/li&gt;
&lt;li&gt;Beer&lt;/li&gt;
&lt;li&gt;Ben&amp;nbsp;Affleck&lt;/li&gt;
&lt;li&gt;Bethesda&amp;nbsp;Softworks&lt;/li&gt;
&lt;li&gt;Bill&amp;nbsp;Maher&lt;/li&gt;
&lt;li&gt;Billy&amp;nbsp;Collins&lt;/li&gt;
&lt;li&gt;Bitcoin&lt;/li&gt;
&lt;li&gt;Black&amp;nbsp;Friday&lt;/li&gt;
&lt;li&gt;Blockchain.com&lt;/li&gt;
&lt;li&gt;Bloom&amp;nbsp;County&lt;/li&gt;
&lt;li&gt;Body&amp;nbsp;image&lt;/li&gt;
&lt;li&gt;Boston&amp;nbsp;Dynamics&lt;/li&gt;
&lt;li&gt;Bourbon&amp;nbsp;whiskey&lt;/li&gt;
&lt;li&gt;Bowmore&lt;/li&gt;
&lt;li&gt;Brooklyn&amp;nbsp;Nine-Nine&lt;/li&gt;
&lt;li&gt;Buffy the Vampire Slayer # Some of these are not accurate at all; for instance I am interested in&amp;nbsp;this&lt;/li&gt;
&lt;li&gt;Calvin and Hobbes #&amp;nbsp;Ibid!&lt;/li&gt;
&lt;li&gt;Cancer&amp;nbsp;patient&lt;/li&gt;
&lt;li&gt;Candy&lt;/li&gt;
&lt;li&gt;Cast&amp;nbsp;iron&lt;/li&gt;
&lt;li&gt;Champagne&lt;/li&gt;
&lt;li&gt;Channel&amp;nbsp;4&lt;/li&gt;
&lt;li&gt;Charles &lt;span class="caps"&gt;III&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Chicken&amp;nbsp;sandwich&lt;/li&gt;
&lt;li&gt;Cider&lt;/li&gt;
&lt;li&gt;Citroën&lt;/li&gt;
&lt;li&gt;Civilization # Unclear if this topic covers Sid Meier&amp;#8217;s Civilization games or &amp;#8220;civilization&amp;#8221; per&amp;nbsp;se&amp;#8230;&lt;/li&gt;
&lt;li&gt;Cocktail&lt;/li&gt;
&lt;li&gt;Comic&amp;nbsp;strip&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;li&gt;Confederate States of&amp;nbsp;America&lt;/li&gt;
&lt;li&gt;Costco&amp;nbsp;Wholesale&lt;/li&gt;
&lt;li&gt;Credit&amp;nbsp;history&lt;/li&gt;
&lt;li&gt;Daniel&amp;nbsp;Craig&lt;/li&gt;
&lt;li&gt;David&amp;nbsp;Gilmour&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DC&lt;/span&gt;&amp;nbsp;Studios&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DC&lt;/span&gt; Universe # I have to imagine that this one started out as an interest until Google (you know, the news app for Android) showed too many articles about it. I&amp;#8217;ve worked on&amp;nbsp;DCUniverse.com!&lt;/li&gt;
&lt;li&gt;Deep&amp;nbsp;frying&lt;/li&gt;
&lt;li&gt;Dell Alienware&amp;nbsp;Aurora&lt;/li&gt;
&lt;li&gt;Dental&amp;nbsp;braces&lt;/li&gt;
&lt;li&gt;Diablo&lt;/li&gt;
&lt;li&gt;Diablo &lt;span class="caps"&gt;III&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Dilbert&lt;/li&gt;
&lt;li&gt;Dinesh&amp;nbsp;D&amp;#8217;Souza&lt;/li&gt;
&lt;li&gt;Disney+&lt;/li&gt;
&lt;li&gt;Donald&amp;nbsp;Trump&lt;/li&gt;
&lt;li&gt;Doom&amp;nbsp;Patrol&lt;/li&gt;
&lt;li&gt;Dungeons &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Dragons&lt;/li&gt;
&lt;li&gt;Dunkin&amp;#8217;&lt;/li&gt;
&lt;li&gt;Ear #&amp;nbsp;?&lt;/li&gt;
&lt;li&gt;Elizabeth &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Elon&amp;nbsp;Musk&lt;/li&gt;
&lt;li&gt;Epic&amp;nbsp;Games&lt;/li&gt;
&lt;li&gt;Eric&amp;nbsp;Cartman&lt;/li&gt;
&lt;li&gt;Eye&amp;nbsp;color&lt;/li&gt;
&lt;li&gt;Fallout&lt;/li&gt;
&lt;li&gt;Family&amp;nbsp;Feud&lt;/li&gt;
&lt;li&gt;Frieza&lt;/li&gt;
&lt;li&gt;Frisch&amp;#8217;s Big&amp;nbsp;Boy&lt;/li&gt;
&lt;li&gt;Full-time&amp;nbsp;job&lt;/li&gt;
&lt;li&gt;Gin&lt;/li&gt;
&lt;li&gt;Gluten-free&amp;nbsp;diet&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Ground&amp;nbsp;beef&lt;/li&gt;
&lt;li&gt;Harley&amp;nbsp;Benton&lt;/li&gt;
&lt;li&gt;Harry&amp;nbsp;Potter&lt;/li&gt;
&lt;li&gt;Historical&amp;nbsp;Fiction&lt;/li&gt;
&lt;li&gt;Hunter&amp;nbsp;Biden&lt;/li&gt;
&lt;li&gt;Intelligence&amp;nbsp;quotient&lt;/li&gt;
&lt;li&gt;Internet Explorer&amp;nbsp;11&lt;/li&gt;
&lt;li&gt;Interview&lt;/li&gt;
&lt;li&gt;iPhone&lt;/li&gt;
&lt;li&gt;Irish&amp;nbsp;whiskey&lt;/li&gt;
&lt;li&gt;Israel&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;J. K.&lt;/span&gt;&amp;nbsp;Rowling&lt;/li&gt;
&lt;li&gt;Jada Pinkett&amp;nbsp;Smith&lt;/li&gt;
&lt;li&gt;James&amp;nbsp;Bond&lt;/li&gt;
&lt;li&gt;James&amp;nbsp;Gunn&lt;/li&gt;
&lt;li&gt;Jay&amp;nbsp;Leno&lt;/li&gt;
&lt;li&gt;Jay Leno&amp;#8217;s&amp;nbsp;Garage&lt;/li&gt;
&lt;li&gt;Jeff&amp;nbsp;Bezos&lt;/li&gt;
&lt;li&gt;Jim&amp;nbsp;Cramer&lt;/li&gt;
&lt;li&gt;Joe&amp;nbsp;Rogan&lt;/li&gt;
&lt;li&gt;Joey&amp;nbsp;Chestnut&lt;/li&gt;
&lt;li&gt;Judi&amp;nbsp;Dench&lt;/li&gt;
&lt;li&gt;Kang the&amp;nbsp;Conqueror&lt;/li&gt;
&lt;li&gt;Kanye&amp;nbsp;West&lt;/li&gt;
&lt;li&gt;Khloé&amp;nbsp;Kardashian&lt;/li&gt;
&lt;li&gt;Kroger&lt;/li&gt;
&lt;li&gt;Learning&amp;nbsp;Italian&lt;/li&gt;
&lt;li&gt;Liam&amp;nbsp;Neeson&lt;/li&gt;
&lt;li&gt;MacKenzie&amp;nbsp;Scott&lt;/li&gt;
&lt;li&gt;Magic: The&amp;nbsp;Gathering&lt;/li&gt;
&lt;li&gt;Mandalorians&lt;/li&gt;
&lt;li&gt;Mark&amp;nbsp;Zuckerberg&lt;/li&gt;
&lt;li&gt;Martini&lt;/li&gt;
&lt;li&gt;Marvel Cinematic&amp;nbsp;Universe&lt;/li&gt;
&lt;li&gt;Marvel&amp;nbsp;Comics&lt;/li&gt;
&lt;li&gt;Matthew&amp;nbsp;Perry&lt;/li&gt;
&lt;li&gt;McDonald&amp;#8217;s&lt;/li&gt;
&lt;li&gt;Meghan, Duchess of&amp;nbsp;Sussex&lt;/li&gt;
&lt;li&gt;Michael&amp;nbsp;Heizer&lt;/li&gt;
&lt;li&gt;Microsoft Windows #&amp;nbsp;bet&lt;/li&gt;
&lt;li&gt;Millennials&lt;/li&gt;
&lt;li&gt;My Hero&amp;nbsp;Academia&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Neymar&lt;/li&gt;
&lt;li&gt;Nike&lt;/li&gt;
&lt;li&gt;Nike&amp;nbsp;Store&lt;/li&gt;
&lt;li&gt;Nike World&amp;nbsp;Headquarters&lt;/li&gt;
&lt;li&gt;Non-fungible&amp;nbsp;token&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ONYX&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Overwatch&lt;/li&gt;
&lt;li&gt;Parent&lt;/li&gt;
&lt;li&gt;Paul&amp;nbsp;Hollywood&lt;/li&gt;
&lt;li&gt;Peloton&lt;/li&gt;
&lt;li&gt;Peppermint&amp;nbsp;Mocha&lt;/li&gt;
&lt;li&gt;Peter&amp;nbsp;Safran&lt;/li&gt;
&lt;li&gt;Phonograph&lt;/li&gt;
&lt;li&gt;Pierce&amp;nbsp;Brosnan&lt;/li&gt;
&lt;li&gt;PlayStation&amp;nbsp;4&lt;/li&gt;
&lt;li&gt;Pokémon &lt;span class="caps"&gt;GO&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Portable audio player # I&amp;#8217;d be interested in both of these topics from any&amp;nbsp;source&lt;/li&gt;
&lt;li&gt;Portable media player # that&amp;#8217;s not desperately trying to sell me&amp;nbsp;stuff&amp;#8230;&lt;/li&gt;
&lt;li&gt;Positive&amp;nbsp;Grid&lt;/li&gt;
&lt;li&gt;Prue&amp;nbsp;Leith&lt;/li&gt;
&lt;li&gt;Psychonauts&amp;nbsp;2&lt;/li&gt;
&lt;li&gt;reCAPTCHA&lt;/li&gt;
&lt;li&gt;Recruiter&lt;/li&gt;
&lt;li&gt;Rick and&amp;nbsp;Morty&lt;/li&gt;
&lt;li&gt;Roger&amp;nbsp;Waters&lt;/li&gt;
&lt;li&gt;Rosie&amp;nbsp;O&amp;#8217;Donnell&lt;/li&gt;
&lt;li&gt;Roth &lt;span class="caps"&gt;IRA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Scoliosis&lt;/li&gt;
&lt;li&gt;Sea of&amp;nbsp;Thieves&lt;/li&gt;
&lt;li&gt;Sean&amp;nbsp;Spicer&lt;/li&gt;
&lt;li&gt;Self-checkout&lt;/li&gt;
&lt;li&gt;Sharpening&lt;/li&gt;
&lt;li&gt;Shoplifting&lt;/li&gt;
&lt;li&gt;Simu&amp;nbsp;Liu&lt;/li&gt;
&lt;li&gt;Sony&lt;/li&gt;
&lt;li&gt;Sony&amp;nbsp;Walkman&lt;/li&gt;
&lt;li&gt;Spectre&lt;/li&gt;
&lt;li&gt;Spirit&lt;/li&gt;
&lt;li&gt;Sports&lt;/li&gt;
&lt;li&gt;Starbucks&lt;/li&gt;
&lt;li&gt;Stardew&amp;nbsp;Valley&lt;/li&gt;
&lt;li&gt;Step&amp;nbsp;Brothers&lt;/li&gt;
&lt;li&gt;Steve&amp;nbsp;Jobs&lt;/li&gt;
&lt;li&gt;Subway&lt;/li&gt;
&lt;li&gt;Sunscreen&lt;/li&gt;
&lt;li&gt;Superhero&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;T. S.&lt;/span&gt;&amp;nbsp;Eliot&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Conjuring&lt;/li&gt;
&lt;li&gt;The Good&amp;nbsp;Place&lt;/li&gt;
&lt;li&gt;The Tonight&amp;nbsp;Show&lt;/li&gt;
&lt;li&gt;Tom&amp;nbsp;Hiddleston&lt;/li&gt;
&lt;li&gt;Tom&amp;nbsp;Hovey&lt;/li&gt;
&lt;li&gt;Tortilla&amp;nbsp;press&lt;/li&gt;
&lt;li&gt;Toxoplasma&amp;nbsp;gondii&lt;/li&gt;
&lt;li&gt;Trader Joe&amp;#8217;s (Grocery store&amp;nbsp;company)&lt;/li&gt;
&lt;li&gt;Trader&amp;nbsp;Joe&amp;#8217;s&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TSMC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Uno&lt;/li&gt;
&lt;li&gt;Vegeta&lt;/li&gt;
&lt;li&gt;Vice&amp;nbsp;President&lt;/li&gt;
&lt;li&gt;Video&amp;nbsp;game&lt;/li&gt;
&lt;li&gt;Walmart&lt;/li&gt;
&lt;li&gt;Walt Disney World®&amp;nbsp;Resort&lt;/li&gt;
&lt;li&gt;Wanda&amp;nbsp;Maximoff&lt;/li&gt;
&lt;li&gt;Warren&amp;nbsp;Buffett&lt;/li&gt;
&lt;li&gt;Web3&lt;/li&gt;
&lt;li&gt;Wendy&amp;#8217;s&amp;nbsp;Company&lt;/li&gt;
&lt;li&gt;Whisky&lt;/li&gt;
&lt;li&gt;William Jackson&amp;nbsp;Harper&lt;/li&gt;
&lt;li&gt;William&amp;nbsp;Tanuwijaya&lt;/li&gt;
&lt;li&gt;Wine&lt;/li&gt;
&lt;li&gt;Workforce&lt;/li&gt;
&lt;li&gt;Zodiac&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;AOL&lt;/span&gt;.com&lt;/li&gt;
&lt;li&gt;Apartment&amp;nbsp;Therapy&lt;/li&gt;
&lt;li&gt;Artnet&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;Axios&lt;/li&gt;
&lt;li&gt;Bam Smack&amp;nbsp;Pow&lt;/li&gt;
&lt;li&gt;Big&amp;nbsp;Think&lt;/li&gt;
&lt;li&gt;Blizzard&amp;nbsp;Watch&lt;/li&gt;
&lt;li&gt;Bloomberg.com&lt;/li&gt;
&lt;li&gt;Boing&amp;nbsp;Boing&lt;/li&gt;
&lt;li&gt;Bored&amp;nbsp;Panda&lt;/li&gt;
&lt;li&gt;Boston News, Weather, Sports | &lt;span class="caps"&gt;WHDH&lt;/span&gt;&amp;nbsp;7News&lt;/li&gt;
&lt;li&gt;Business&amp;nbsp;Insider&lt;/li&gt;
&lt;li&gt;BuzzFeed&lt;/li&gt;
&lt;li&gt;BuzzFeed&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CBR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CBS&lt;/span&gt;&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CBS&lt;/span&gt;&amp;nbsp;Sports&lt;/li&gt;
&lt;li&gt;Cheezburger&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CNBC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CNET&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CNN&lt;/span&gt;.com&lt;/li&gt;
&lt;li&gt;Comic&amp;nbsp;Book&lt;/li&gt;
&lt;li&gt;Cosmic Book&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;Daily&amp;nbsp;Express&lt;/li&gt;
&lt;li&gt;Daily&amp;nbsp;Wire&lt;/li&gt;
&lt;li&gt;Deadline&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DEV&lt;/span&gt;&amp;nbsp;Community&lt;/li&gt;
&lt;li&gt;Digital&amp;nbsp;Trends&lt;/li&gt;
&lt;li&gt;Dwell&lt;/li&gt;
&lt;li&gt;EatingWell&lt;/li&gt;
&lt;li&gt;Entertainment&amp;nbsp;Weekly&lt;/li&gt;
&lt;li&gt;Entrepreneur&lt;/li&gt;
&lt;li&gt;Fast&amp;nbsp;Company&lt;/li&gt;
&lt;li&gt;FinanceBuzz&lt;/li&gt;
&lt;li&gt;Fortune&lt;/li&gt;
&lt;li&gt;Fox&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;Good&amp;nbsp;e-Reader&lt;/li&gt;
&lt;li&gt;Grow from Acorns + &lt;span class="caps"&gt;CNBC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Harvard Business&amp;nbsp;Review&lt;/li&gt;
&lt;li&gt;Heroic&amp;nbsp;Hollywood&lt;/li&gt;
&lt;li&gt;HuffPost&lt;/li&gt;
&lt;li&gt;195&amp;nbsp;Rock&lt;/li&gt;
&lt;li&gt;IFLScience&lt;/li&gt;
&lt;li&gt;In The&amp;nbsp;Know&lt;/li&gt;
&lt;li&gt;Inc.com&lt;/li&gt;
&lt;li&gt;Inside the&amp;nbsp;Magic&lt;/li&gt;
&lt;li&gt;Insider&lt;/li&gt;
&lt;li&gt;Inverse&lt;/li&gt;
&lt;li&gt;Kirbie&amp;#8217;s&amp;nbsp;Cravings&lt;/li&gt;
&lt;li&gt;Lifehacker&lt;/li&gt;
&lt;li&gt;MarketWatch&lt;/li&gt;
&lt;li&gt;Medical News&amp;nbsp;Today&lt;/li&gt;
&lt;li&gt;Microsoft&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;Mildly&amp;nbsp;Meandering&lt;/li&gt;
&lt;li&gt;Military&amp;nbsp;Times&lt;/li&gt;
&lt;li&gt;MindBodyGreen&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;MSN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;MTO&lt;/span&gt;&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;MusicRadar&lt;/li&gt;
&lt;li&gt;National Catholic&amp;nbsp;Register&lt;/li&gt;
&lt;li&gt;National Catholic&amp;nbsp;Reporter&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;NBC&lt;/span&gt;&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;Neuroscience&amp;nbsp;News&lt;/li&gt;
&lt;li&gt;New&amp;nbsp;Scientist&lt;/li&gt;
&lt;li&gt;New York&amp;nbsp;Post&lt;/li&gt;
&lt;li&gt;Page&amp;nbsp;Six&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PC&lt;/span&gt;&amp;nbsp;Gamer&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PEOPLE&lt;/span&gt;.com&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PETA&lt;/span&gt; Headlines - &lt;span class="caps"&gt;PETA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Pinch of&amp;nbsp;Yum&lt;/li&gt;
&lt;li&gt;Pokémon &lt;span class="caps"&gt;GO&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Pokemon &lt;span class="caps"&gt;GO&lt;/span&gt;&amp;nbsp;Hub&lt;/li&gt;
&lt;li&gt;Politico&lt;/li&gt;
&lt;li&gt;Polygon&lt;/li&gt;
&lt;li&gt;Psychology&amp;nbsp;Today&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;Rockstar&amp;nbsp;Games&lt;/li&gt;
&lt;li&gt;Scary&amp;nbsp;Mommy&lt;/li&gt;
&lt;li&gt;ScienceAlert&lt;/li&gt;
&lt;li&gt;SciTechDaily&lt;/li&gt;
&lt;li&gt;Screen&amp;nbsp;Rant&lt;/li&gt;
&lt;li&gt;Slate&lt;/li&gt;
&lt;li&gt;StyleCaster&lt;/li&gt;
&lt;li&gt;talkSPORT&lt;/li&gt;
&lt;li&gt;Tasting&amp;nbsp;Table&lt;/li&gt;
&lt;li&gt;TechRadar&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Archaeologist&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Atlantic&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Blast&lt;/li&gt;
&lt;li&gt;The Cheat&amp;nbsp;Sheet&lt;/li&gt;
&lt;li&gt;The Daily&amp;nbsp;Beast&lt;/li&gt;
&lt;li&gt;The Daily&amp;nbsp;Dot&lt;/li&gt;
&lt;li&gt;The Direct |&amp;nbsp;Entertainment&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Hill&lt;/li&gt;
&lt;li&gt;The Hollywood&amp;nbsp;Reporter&lt;/li&gt;
&lt;li&gt;The New York&amp;nbsp;Times&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Sun&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Takeout&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;US&lt;/span&gt;&amp;nbsp;Sun&lt;/li&gt;
&lt;li&gt;The&amp;nbsp;Verge&lt;/li&gt;
&lt;li&gt;The Wall Street&amp;nbsp;Journal&lt;/li&gt;
&lt;li&gt;The Washington&amp;nbsp;Post&lt;/li&gt;
&lt;li&gt;TheNextWeb&lt;/li&gt;
&lt;li&gt;TheStreet&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TMZ&lt;/span&gt;.com&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TODAY&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Upworthy&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;USA&lt;/span&gt;&amp;nbsp;Today&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;VICE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;View from the&amp;nbsp;Wing&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;WANE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;We Got This&amp;nbsp;Covered&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;VICE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;View from the&amp;nbsp;Wing&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;WANE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;We Got This&amp;nbsp;Covered&lt;/li&gt;
&lt;li&gt;Well+Good&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;WYRK&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Yahoo&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Types of&amp;nbsp;Info&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sports&amp;nbsp;updates&lt;/li&gt;
&lt;li&gt;Stories&lt;/li&gt;
&lt;li&gt;Streaming&amp;nbsp;recommendations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</content><category term="blog"></category><category term="blog"></category></entry></feed>